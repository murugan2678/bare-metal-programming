
timer1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000250  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003e4  080003e4  0000200c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003e4  080003e4  0000200c  2**0
                  CONTENTS
  4 .ARM          00000000  080003e4  080003e4  0000200c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003e4  080003e4  0000200c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003e4  080003e4  000013e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080003e8  080003e8  000013e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080003ec  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  2000000c  080003f8  0000200c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000028  080003f8  00002028  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000200c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000443  00000000  00000000  0000203c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000014d  00000000  00000000  0000247f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000078  00000000  00000000  000025d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000050  00000000  00000000  00002648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000ad5  00000000  00000000  00002698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000001ec  00000000  00000000  0000316d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00002ffe  00000000  00000000  00003359  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00006357  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000011c  00000000  00000000  0000639c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000064b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080003cc 	.word	0x080003cc

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	080003cc 	.word	0x080003cc

080001d4 <main>:
 */

#include "arm.h"

int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
	rcc_config();
 80001d8:	f000 f808 	bl	80001ec <rcc_config>
	peripheral_bus_config();
 80001dc:	f000 f830 	bl	8000240 <peripheral_bus_config>
	gpioa_moder_config();
 80001e0:	f000 f848 	bl	8000274 <gpioa_moder_config>
	while(1)
	{
		led_blinking();
 80001e4:	f000 f886 	bl	80002f4 <led_blinking>
 80001e8:	e7fc      	b.n	80001e4 <main+0x10>
	...

080001ec <rcc_config>:
	}
}

void rcc_config(void)
{
 80001ec:	b480      	push	{r7}
 80001ee:	af00      	add	r7, sp, #0
	RCC->CR &= ~(1 << 0);
 80001f0:	4b12      	ldr	r3, [pc, #72]	@ (800023c <rcc_config+0x50>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	681a      	ldr	r2, [r3, #0]
 80001f6:	4b11      	ldr	r3, [pc, #68]	@ (800023c <rcc_config+0x50>)
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	f022 0201 	bic.w	r2, r2, #1
 80001fe:	601a      	str	r2, [r3, #0]
	RCC->CR |= (1 << 0);
 8000200:	4b0e      	ldr	r3, [pc, #56]	@ (800023c <rcc_config+0x50>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	681a      	ldr	r2, [r3, #0]
 8000206:	4b0d      	ldr	r3, [pc, #52]	@ (800023c <rcc_config+0x50>)
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	f042 0201 	orr.w	r2, r2, #1
 800020e:	601a      	str	r2, [r3, #0]
	while(!(RCC->CR & (1 << 1)));
 8000210:	bf00      	nop
 8000212:	4b0a      	ldr	r3, [pc, #40]	@ (800023c <rcc_config+0x50>)
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	f003 0302 	and.w	r3, r3, #2
 800021c:	2b00      	cmp	r3, #0
 800021e:	d0f8      	beq.n	8000212 <rcc_config+0x26>

	RCC->CFGR &= ~(3 << 0);
 8000220:	4b06      	ldr	r3, [pc, #24]	@ (800023c <rcc_config+0x50>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	689a      	ldr	r2, [r3, #8]
 8000226:	4b05      	ldr	r3, [pc, #20]	@ (800023c <rcc_config+0x50>)
 8000228:	681b      	ldr	r3, [r3, #0]
 800022a:	f022 0203 	bic.w	r2, r2, #3
 800022e:	609a      	str	r2, [r3, #8]
	//while((RCC->CFGR & (3 << 2)) != (0 << 2));
}
 8000230:	bf00      	nop
 8000232:	46bd      	mov	sp, r7
 8000234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000238:	4770      	bx	lr
 800023a:	bf00      	nop
 800023c:	20000000 	.word	0x20000000

08000240 <peripheral_bus_config>:

void peripheral_bus_config(void)
{
 8000240:	b480      	push	{r7}
 8000242:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= (1 << 0);  // port A clock enable
 8000244:	4b0a      	ldr	r3, [pc, #40]	@ (8000270 <peripheral_bus_config+0x30>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800024a:	4b09      	ldr	r3, [pc, #36]	@ (8000270 <peripheral_bus_config+0x30>)
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	f042 0201 	orr.w	r2, r2, #1
 8000252:	631a      	str	r2, [r3, #48]	@ 0x30

	RCC->APB2ENR |= (1 << 0);  // TIM1  clock enable
 8000254:	4b06      	ldr	r3, [pc, #24]	@ (8000270 <peripheral_bus_config+0x30>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800025a:	4b05      	ldr	r3, [pc, #20]	@ (8000270 <peripheral_bus_config+0x30>)
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	f042 0201 	orr.w	r2, r2, #1
 8000262:	645a      	str	r2, [r3, #68]	@ 0x44
}
 8000264:	bf00      	nop
 8000266:	46bd      	mov	sp, r7
 8000268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop
 8000270:	20000000 	.word	0x20000000

08000274 <gpioa_moder_config>:

void gpioa_moder_config(void)
{
 8000274:	b480      	push	{r7}
 8000276:	af00      	add	r7, sp, #0
	GPIOA->MODER |= (1 << 0);  // 01 : General purpose output
 8000278:	4b06      	ldr	r3, [pc, #24]	@ (8000294 <gpioa_moder_config+0x20>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	681a      	ldr	r2, [r3, #0]
 800027e:	4b05      	ldr	r3, [pc, #20]	@ (8000294 <gpioa_moder_config+0x20>)
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	f042 0201 	orr.w	r2, r2, #1
 8000286:	601a      	str	r2, [r3, #0]
}
 8000288:	bf00      	nop
 800028a:	46bd      	mov	sp, r7
 800028c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000290:	4770      	bx	lr
 8000292:	bf00      	nop
 8000294:	20000004 	.word	0x20000004

08000298 <timer1_delay>:

    TIM1->CNT = 0;   // counter starting with zero
}

void timer1_delay(int val)
{
 8000298:	b480      	push	{r7}
 800029a:	b083      	sub	sp, #12
 800029c:	af00      	add	r7, sp, #0
 800029e:	6078      	str	r0, [r7, #4]
	TIM1->PSC = 999;
 80002a0:	4b13      	ldr	r3, [pc, #76]	@ (80002f0 <timer1_delay+0x58>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80002a8:	629a      	str	r2, [r3, #40]	@ 0x28

	TIM1->ARR = val;
 80002aa:	4b11      	ldr	r3, [pc, #68]	@ (80002f0 <timer1_delay+0x58>)
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	687a      	ldr	r2, [r7, #4]
 80002b0:	62da      	str	r2, [r3, #44]	@ 0x2c

	TIM1->CR1 |= (1 << 0);
 80002b2:	4b0f      	ldr	r3, [pc, #60]	@ (80002f0 <timer1_delay+0x58>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	681a      	ldr	r2, [r3, #0]
 80002b8:	4b0d      	ldr	r3, [pc, #52]	@ (80002f0 <timer1_delay+0x58>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	f042 0201 	orr.w	r2, r2, #1
 80002c0:	601a      	str	r2, [r3, #0]

	while(!(TIM1->SR & (1 << 0)));
 80002c2:	bf00      	nop
 80002c4:	4b0a      	ldr	r3, [pc, #40]	@ (80002f0 <timer1_delay+0x58>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	691b      	ldr	r3, [r3, #16]
 80002ca:	f003 0301 	and.w	r3, r3, #1
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d0f8      	beq.n	80002c4 <timer1_delay+0x2c>

	TIM1->SR &= ~(1 << 0);
 80002d2:	4b07      	ldr	r3, [pc, #28]	@ (80002f0 <timer1_delay+0x58>)
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	691a      	ldr	r2, [r3, #16]
 80002d8:	4b05      	ldr	r3, [pc, #20]	@ (80002f0 <timer1_delay+0x58>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	f022 0201 	bic.w	r2, r2, #1
 80002e0:	611a      	str	r2, [r3, #16]
}
 80002e2:	bf00      	nop
 80002e4:	370c      	adds	r7, #12
 80002e6:	46bd      	mov	sp, r7
 80002e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop
 80002f0:	20000008 	.word	0x20000008

080002f4 <led_blinking>:

void led_blinking(void)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	af00      	add	r7, sp, #0
	GPIOA->ODR |= (1 << 0);
 80002f8:	4b0c      	ldr	r3, [pc, #48]	@ (800032c <led_blinking+0x38>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	695a      	ldr	r2, [r3, #20]
 80002fe:	4b0b      	ldr	r3, [pc, #44]	@ (800032c <led_blinking+0x38>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	f042 0201 	orr.w	r2, r2, #1
 8000306:	615a      	str	r2, [r3, #20]
	timer1_delay(1600);     // 100ms milliseconds value : 1600, 500ms milliseconds value : 8000, 1s seconds means 1000ms value : 16000
 8000308:	f44f 60c8 	mov.w	r0, #1600	@ 0x640
 800030c:	f7ff ffc4 	bl	8000298 <timer1_delay>
	GPIOA->ODR &= ~(1 << 0);
 8000310:	4b06      	ldr	r3, [pc, #24]	@ (800032c <led_blinking+0x38>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	695a      	ldr	r2, [r3, #20]
 8000316:	4b05      	ldr	r3, [pc, #20]	@ (800032c <led_blinking+0x38>)
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	f022 0201 	bic.w	r2, r2, #1
 800031e:	615a      	str	r2, [r3, #20]
	timer1_delay(1600);
 8000320:	f44f 60c8 	mov.w	r0, #1600	@ 0x640
 8000324:	f7ff ffb8 	bl	8000298 <timer1_delay>
}
 8000328:	bf00      	nop
 800032a:	bd80      	pop	{r7, pc}
 800032c:	20000004 	.word	0x20000004

08000330 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000330:	480d      	ldr	r0, [pc, #52]	@ (8000368 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000332:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000334:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000338:	480c      	ldr	r0, [pc, #48]	@ (800036c <LoopForever+0x6>)
  ldr r1, =_edata
 800033a:	490d      	ldr	r1, [pc, #52]	@ (8000370 <LoopForever+0xa>)
  ldr r2, =_sidata
 800033c:	4a0d      	ldr	r2, [pc, #52]	@ (8000374 <LoopForever+0xe>)
  movs r3, #0
 800033e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000340:	e002      	b.n	8000348 <LoopCopyDataInit>

08000342 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000342:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000344:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000346:	3304      	adds	r3, #4

08000348 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000348:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800034a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800034c:	d3f9      	bcc.n	8000342 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800034e:	4a0a      	ldr	r2, [pc, #40]	@ (8000378 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000350:	4c0a      	ldr	r4, [pc, #40]	@ (800037c <LoopForever+0x16>)
  movs r3, #0
 8000352:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000354:	e001      	b.n	800035a <LoopFillZerobss>

08000356 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000356:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000358:	3204      	adds	r2, #4

0800035a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800035a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800035c:	d3fb      	bcc.n	8000356 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800035e:	f000 f811 	bl	8000384 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000362:	f7ff ff37 	bl	80001d4 <main>

08000366 <LoopForever>:

LoopForever:
  b LoopForever
 8000366:	e7fe      	b.n	8000366 <LoopForever>
  ldr   r0, =_estack
 8000368:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800036c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000370:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000374:	080003ec 	.word	0x080003ec
  ldr r2, =_sbss
 8000378:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800037c:	20000028 	.word	0x20000028

08000380 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000380:	e7fe      	b.n	8000380 <ADC_IRQHandler>
	...

08000384 <__libc_init_array>:
 8000384:	b570      	push	{r4, r5, r6, lr}
 8000386:	4d0d      	ldr	r5, [pc, #52]	@ (80003bc <__libc_init_array+0x38>)
 8000388:	4c0d      	ldr	r4, [pc, #52]	@ (80003c0 <__libc_init_array+0x3c>)
 800038a:	1b64      	subs	r4, r4, r5
 800038c:	10a4      	asrs	r4, r4, #2
 800038e:	2600      	movs	r6, #0
 8000390:	42a6      	cmp	r6, r4
 8000392:	d109      	bne.n	80003a8 <__libc_init_array+0x24>
 8000394:	4d0b      	ldr	r5, [pc, #44]	@ (80003c4 <__libc_init_array+0x40>)
 8000396:	4c0c      	ldr	r4, [pc, #48]	@ (80003c8 <__libc_init_array+0x44>)
 8000398:	f000 f818 	bl	80003cc <_init>
 800039c:	1b64      	subs	r4, r4, r5
 800039e:	10a4      	asrs	r4, r4, #2
 80003a0:	2600      	movs	r6, #0
 80003a2:	42a6      	cmp	r6, r4
 80003a4:	d105      	bne.n	80003b2 <__libc_init_array+0x2e>
 80003a6:	bd70      	pop	{r4, r5, r6, pc}
 80003a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80003ac:	4798      	blx	r3
 80003ae:	3601      	adds	r6, #1
 80003b0:	e7ee      	b.n	8000390 <__libc_init_array+0xc>
 80003b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80003b6:	4798      	blx	r3
 80003b8:	3601      	adds	r6, #1
 80003ba:	e7f2      	b.n	80003a2 <__libc_init_array+0x1e>
 80003bc:	080003e4 	.word	0x080003e4
 80003c0:	080003e4 	.word	0x080003e4
 80003c4:	080003e4 	.word	0x080003e4
 80003c8:	080003e8 	.word	0x080003e8

080003cc <_init>:
 80003cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ce:	bf00      	nop
 80003d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003d2:	bc08      	pop	{r3}
 80003d4:	469e      	mov	lr, r3
 80003d6:	4770      	bx	lr

080003d8 <_fini>:
 80003d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003da:	bf00      	nop
 80003dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003de:	bc08      	pop	{r3}
 80003e0:	469e      	mov	lr, r3
 80003e2:	4770      	bx	lr
