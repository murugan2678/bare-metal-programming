
timer10.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002c0  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000454  08000454  0000200c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000454  08000454  0000200c  2**0
                  CONTENTS
  4 .ARM          00000000  08000454  08000454  0000200c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000454  08000454  0000200c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000454  08000454  00001454  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000458  08000458  00001458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800045c  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  2000000c  08000468  0000200c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000028  08000468  00002028  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000200c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000044d  00000000  00000000  0000203c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000014d  00000000  00000000  00002489  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000078  00000000  00000000  000025d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000050  00000000  00000000  00002650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000ad5  00000000  00000000  000026a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000207  00000000  00000000  00003175  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00002fe3  00000000  00000000  0000337c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0000635f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000011c  00000000  00000000  000063a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000064c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800043c 	.word	0x0800043c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	0800043c 	.word	0x0800043c

080001d4 <main>:
#include "arm.h"  /* this header file for all register inside there. using for structure is user-defined data type */

/* main function */

int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
	/* function call */
	rcc_config();
 80001d8:	f000 f80a 	bl	80001f0 <rcc_config>
	peripheral_bus_config();
 80001dc:	f000 f842 	bl	8000264 <peripheral_bus_config>
	gpioc_moder_config();
 80001e0:	f000 f85a 	bl	8000298 <gpioc_moder_config>
	timer10_config();
 80001e4:	f000 f888 	bl	80002f8 <timer10_config>
	while(1)
	{
		led_blinking();
 80001e8:	f000 f868 	bl	80002bc <led_blinking>
 80001ec:	e7fc      	b.n	80001e8 <main+0x14>
	...

080001f0 <rcc_config>:
}

/* function definition */

void rcc_config(void)
{
 80001f0:	b480      	push	{r7}
 80001f2:	af00      	add	r7, sp, #0
	/* Reset clock control (RCC_CR) clock control register */

	/* set and clear 16th bit */
	RCC->CR &= (~0x00010000);
 80001f4:	4b1a      	ldr	r3, [pc, #104]	@ (8000260 <rcc_config+0x70>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	681a      	ldr	r2, [r3, #0]
 80001fa:	4b19      	ldr	r3, [pc, #100]	@ (8000260 <rcc_config+0x70>)
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8000202:	601a      	str	r2, [r3, #0]

	/* select 16th bit HSEON : HSE clock enable. 1 : HSE oscillator ON */
	RCC->CR |= (1 << 16);
 8000204:	4b16      	ldr	r3, [pc, #88]	@ (8000260 <rcc_config+0x70>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	681a      	ldr	r2, [r3, #0]
 800020a:	4b15      	ldr	r3, [pc, #84]	@ (8000260 <rcc_config+0x70>)
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8000212:	601a      	str	r2, [r3, #0]

	/* select 17th bit HSERDY : HSE clock ready flag. 1 : HSE oscillator ready. HSE external oscillator ready or not checking */
	while(!(RCC->CR & (1 << 17)));
 8000214:	bf00      	nop
 8000216:	4b12      	ldr	r3, [pc, #72]	@ (8000260 <rcc_config+0x70>)
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000220:	2b00      	cmp	r3, #0
 8000222:	d0f8      	beq.n	8000216 <rcc_config+0x26>

	/* Reset clock control (RCC_CFGR) clock configuration register */

	/* set and clear 0th bit and 1st bit. 11 : not allowed */
	RCC->CFGR &= (~0x00000003);
 8000224:	4b0e      	ldr	r3, [pc, #56]	@ (8000260 <rcc_config+0x70>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	689a      	ldr	r2, [r3, #8]
 800022a:	4b0d      	ldr	r3, [pc, #52]	@ (8000260 <rcc_config+0x70>)
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	f022 0203 	bic.w	r2, r2, #3
 8000232:	609a      	str	r2, [r3, #8]

	/* select 0th bit SW  : System clock switch. 01 : HSE oscillator selected as system clock */
	RCC->CFGR |= (1 << 0);
 8000234:	4b0a      	ldr	r3, [pc, #40]	@ (8000260 <rcc_config+0x70>)
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	689a      	ldr	r2, [r3, #8]
 800023a:	4b09      	ldr	r3, [pc, #36]	@ (8000260 <rcc_config+0x70>)
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	f042 0201 	orr.w	r2, r2, #1
 8000242:	609a      	str	r2, [r3, #8]

	/* select 2nd bit SWS : System clock switch status. 01 : HSE oscillator used as the system clock */
	while(!(RCC->CFGR & (0x00000004)));
 8000244:	bf00      	nop
 8000246:	4b06      	ldr	r3, [pc, #24]	@ (8000260 <rcc_config+0x70>)
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	689b      	ldr	r3, [r3, #8]
 800024c:	f003 0304 	and.w	r3, r3, #4
 8000250:	2b00      	cmp	r3, #0
 8000252:	d0f8      	beq.n	8000246 <rcc_config+0x56>
}
 8000254:	bf00      	nop
 8000256:	bf00      	nop
 8000258:	46bd      	mov	sp, r7
 800025a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800025e:	4770      	bx	lr
 8000260:	20000000 	.word	0x20000000

08000264 <peripheral_bus_config>:

void peripheral_bus_config(void)
{
 8000264:	b480      	push	{r7}
 8000266:	af00      	add	r7, sp, #0
	/* AHB1ENR Advanced High Bus 1 (RCC_AHB1ENR) peripheral enable register	*/

	RCC->AHB1ENR |= (1 << 0);   // GPIOAEN : IO port A clock enable. 0th bit set 1
 8000268:	4b0a      	ldr	r3, [pc, #40]	@ (8000294 <peripheral_bus_config+0x30>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800026e:	4b09      	ldr	r3, [pc, #36]	@ (8000294 <peripheral_bus_config+0x30>)
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	f042 0201 	orr.w	r2, r2, #1
 8000276:	631a      	str	r2, [r3, #48]	@ 0x30

	RCC->APB2ENR |= (1 << 17);  // TIMER10EN : TIM10 clock enable. 17th bit set 1
 8000278:	4b06      	ldr	r3, [pc, #24]	@ (8000294 <peripheral_bus_config+0x30>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800027e:	4b05      	ldr	r3, [pc, #20]	@ (8000294 <peripheral_bus_config+0x30>)
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8000286:	645a      	str	r2, [r3, #68]	@ 0x44
}
 8000288:	bf00      	nop
 800028a:	46bd      	mov	sp, r7
 800028c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000290:	4770      	bx	lr
 8000292:	bf00      	nop
 8000294:	20000000 	.word	0x20000000

08000298 <gpioc_moder_config>:

void gpioc_moder_config(void)
{
 8000298:	b480      	push	{r7}
 800029a:	af00      	add	r7, sp, #0
	/* (GPIO) General Purpose Input and Output (GPIOA_MODER) port mode register */
	/* PORT A MODER0 0th pin select. 0th bit set 1. */
	GPIOA->MODER |= (1 << 0); // 01 : General purpose output mode
 800029c:	4b06      	ldr	r3, [pc, #24]	@ (80002b8 <gpioc_moder_config+0x20>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	681a      	ldr	r2, [r3, #0]
 80002a2:	4b05      	ldr	r3, [pc, #20]	@ (80002b8 <gpioc_moder_config+0x20>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	f042 0201 	orr.w	r2, r2, #1
 80002aa:	601a      	str	r2, [r3, #0]
}
 80002ac:	bf00      	nop
 80002ae:	46bd      	mov	sp, r7
 80002b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b4:	4770      	bx	lr
 80002b6:	bf00      	nop
 80002b8:	20000004 	.word	0x20000004

080002bc <led_blinking>:

void led_blinking(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	af00      	add	r7, sp, #0
	/* (GPIO_ODR) output data register */
	GPIOA->ODR |= (1 << 0);  // PORT A 0th pin select. 0th set 1. led on
 80002c0:	4b0c      	ldr	r3, [pc, #48]	@ (80002f4 <led_blinking+0x38>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	695a      	ldr	r2, [r3, #20]
 80002c6:	4b0b      	ldr	r3, [pc, #44]	@ (80002f4 <led_blinking+0x38>)
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	f042 0201 	orr.w	r2, r2, #1
 80002ce:	615a      	str	r2, [r3, #20]

	timer10_delay(2500);  // 100ms milliseconds led 0n
 80002d0:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 80002d4:	f000 f836 	bl	8000344 <timer10_delay>

	GPIOA->ODR &= ~(1 << 0);  // PORT A 0th pin select. 0th clear 0. led of
 80002d8:	4b06      	ldr	r3, [pc, #24]	@ (80002f4 <led_blinking+0x38>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	695a      	ldr	r2, [r3, #20]
 80002de:	4b05      	ldr	r3, [pc, #20]	@ (80002f4 <led_blinking+0x38>)
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	f022 0201 	bic.w	r2, r2, #1
 80002e6:	615a      	str	r2, [r3, #20]

	timer10_delay(2500);  // 100ms milliseconds led off
 80002e8:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 80002ec:	f000 f82a 	bl	8000344 <timer10_delay>
}
 80002f0:	bf00      	nop
 80002f2:	bd80      	pop	{r7, pc}
 80002f4:	20000004 	.word	0x20000004

080002f8 <timer10_config>:

/* timer 10 */

void timer10_config(void)
{
 80002f8:	b480      	push	{r7}
 80002fa:	af00      	add	r7, sp, #0
	/* (TIM10_CR1) control register 1 */

	TIM10->CR1 |= (1 << 1);   // UDIS : update disable. 1 : UEV disabled
 80002fc:	4b10      	ldr	r3, [pc, #64]	@ (8000340 <timer10_config+0x48>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	681a      	ldr	r2, [r3, #0]
 8000302:	4b0f      	ldr	r3, [pc, #60]	@ (8000340 <timer10_config+0x48>)
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	f042 0202 	orr.w	r2, r2, #2
 800030a:	601a      	str	r2, [r3, #0]

	TIM10->CR1 &= (~1 << 2);  //  URS : Update request source. 0 : Any of following events generate an UEV if enabled
 800030c:	4b0c      	ldr	r3, [pc, #48]	@ (8000340 <timer10_config+0x48>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	681a      	ldr	r2, [r3, #0]
 8000312:	4b0b      	ldr	r3, [pc, #44]	@ (8000340 <timer10_config+0x48>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	f022 0207 	bic.w	r2, r2, #7
 800031a:	601a      	str	r2, [r3, #0]

	TIM10->CR1 |= (1 << 7);   // ARPE : Auto-reload preload enable, 1 : TIM10_ARR register is buffered
 800031c:	4b08      	ldr	r3, [pc, #32]	@ (8000340 <timer10_config+0x48>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	681a      	ldr	r2, [r3, #0]
 8000322:	4b07      	ldr	r3, [pc, #28]	@ (8000340 <timer10_config+0x48>)
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800032a:	601a      	str	r2, [r3, #0]

	TIM10->CNT = 0;           // counter value 0
 800032c:	4b04      	ldr	r3, [pc, #16]	@ (8000340 <timer10_config+0x48>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	2200      	movs	r2, #0
 8000332:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000334:	bf00      	nop
 8000336:	46bd      	mov	sp, r7
 8000338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033c:	4770      	bx	lr
 800033e:	bf00      	nop
 8000340:	20000008 	.word	0x20000008

08000344 <timer10_delay>:

void timer10_delay(int val)
{
 8000344:	b480      	push	{r7}
 8000346:	b083      	sub	sp, #12
 8000348:	af00      	add	r7, sp, #0
 800034a:	6078      	str	r0, [r7, #4]
	TIM10->PSC = 1000;        // prescaler division by 1 from 4
 800034c:	4b13      	ldr	r3, [pc, #76]	@ (800039c <timer10_delay+0x58>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000354:	629a      	str	r2, [r3, #40]	@ 0x28

	TIM10->ARR = val;         // 100ms  Auto reload value
 8000356:	4b11      	ldr	r3, [pc, #68]	@ (800039c <timer10_delay+0x58>)
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	687a      	ldr	r2, [r7, #4]
 800035c:	62da      	str	r2, [r3, #44]	@ 0x2c

	TIM10->CR1 |= (1 << 0);   // CEN : Counter enable. 1: Counter enable
 800035e:	4b0f      	ldr	r3, [pc, #60]	@ (800039c <timer10_delay+0x58>)
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	681a      	ldr	r2, [r3, #0]
 8000364:	4b0d      	ldr	r3, [pc, #52]	@ (800039c <timer10_delay+0x58>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	f042 0201 	orr.w	r2, r2, #1
 800036c:	601a      	str	r2, [r3, #0]

    while(!(TIM10->SR & (1 << 0)));  // Update interrupt flag.  1 : Update interrupt pending.
 800036e:	bf00      	nop
 8000370:	4b0a      	ldr	r3, [pc, #40]	@ (800039c <timer10_delay+0x58>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	691b      	ldr	r3, [r3, #16]
 8000376:	f003 0301 	and.w	r3, r3, #1
 800037a:	2b00      	cmp	r3, #0
 800037c:	d0f8      	beq.n	8000370 <timer10_delay+0x2c>

    TIM10->SR &= (~1 << 0);         // clear by software
 800037e:	4b07      	ldr	r3, [pc, #28]	@ (800039c <timer10_delay+0x58>)
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	691a      	ldr	r2, [r3, #16]
 8000384:	4b05      	ldr	r3, [pc, #20]	@ (800039c <timer10_delay+0x58>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	f022 0201 	bic.w	r2, r2, #1
 800038c:	611a      	str	r2, [r3, #16]
}
 800038e:	bf00      	nop
 8000390:	370c      	adds	r7, #12
 8000392:	46bd      	mov	sp, r7
 8000394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000398:	4770      	bx	lr
 800039a:	bf00      	nop
 800039c:	20000008 	.word	0x20000008

080003a0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003a0:	480d      	ldr	r0, [pc, #52]	@ (80003d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003a2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003a4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003a8:	480c      	ldr	r0, [pc, #48]	@ (80003dc <LoopForever+0x6>)
  ldr r1, =_edata
 80003aa:	490d      	ldr	r1, [pc, #52]	@ (80003e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003ac:	4a0d      	ldr	r2, [pc, #52]	@ (80003e4 <LoopForever+0xe>)
  movs r3, #0
 80003ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003b0:	e002      	b.n	80003b8 <LoopCopyDataInit>

080003b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003b6:	3304      	adds	r3, #4

080003b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003bc:	d3f9      	bcc.n	80003b2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003be:	4a0a      	ldr	r2, [pc, #40]	@ (80003e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003c0:	4c0a      	ldr	r4, [pc, #40]	@ (80003ec <LoopForever+0x16>)
  movs r3, #0
 80003c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003c4:	e001      	b.n	80003ca <LoopFillZerobss>

080003c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003c8:	3204      	adds	r2, #4

080003ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003cc:	d3fb      	bcc.n	80003c6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003ce:	f000 f811 	bl	80003f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003d2:	f7ff feff 	bl	80001d4 <main>

080003d6 <LoopForever>:

LoopForever:
  b LoopForever
 80003d6:	e7fe      	b.n	80003d6 <LoopForever>
  ldr   r0, =_estack
 80003d8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80003dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003e0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80003e4:	0800045c 	.word	0x0800045c
  ldr r2, =_sbss
 80003e8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80003ec:	20000028 	.word	0x20000028

080003f0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003f0:	e7fe      	b.n	80003f0 <ADC_IRQHandler>
	...

080003f4 <__libc_init_array>:
 80003f4:	b570      	push	{r4, r5, r6, lr}
 80003f6:	4d0d      	ldr	r5, [pc, #52]	@ (800042c <__libc_init_array+0x38>)
 80003f8:	4c0d      	ldr	r4, [pc, #52]	@ (8000430 <__libc_init_array+0x3c>)
 80003fa:	1b64      	subs	r4, r4, r5
 80003fc:	10a4      	asrs	r4, r4, #2
 80003fe:	2600      	movs	r6, #0
 8000400:	42a6      	cmp	r6, r4
 8000402:	d109      	bne.n	8000418 <__libc_init_array+0x24>
 8000404:	4d0b      	ldr	r5, [pc, #44]	@ (8000434 <__libc_init_array+0x40>)
 8000406:	4c0c      	ldr	r4, [pc, #48]	@ (8000438 <__libc_init_array+0x44>)
 8000408:	f000 f818 	bl	800043c <_init>
 800040c:	1b64      	subs	r4, r4, r5
 800040e:	10a4      	asrs	r4, r4, #2
 8000410:	2600      	movs	r6, #0
 8000412:	42a6      	cmp	r6, r4
 8000414:	d105      	bne.n	8000422 <__libc_init_array+0x2e>
 8000416:	bd70      	pop	{r4, r5, r6, pc}
 8000418:	f855 3b04 	ldr.w	r3, [r5], #4
 800041c:	4798      	blx	r3
 800041e:	3601      	adds	r6, #1
 8000420:	e7ee      	b.n	8000400 <__libc_init_array+0xc>
 8000422:	f855 3b04 	ldr.w	r3, [r5], #4
 8000426:	4798      	blx	r3
 8000428:	3601      	adds	r6, #1
 800042a:	e7f2      	b.n	8000412 <__libc_init_array+0x1e>
 800042c:	08000454 	.word	0x08000454
 8000430:	08000454 	.word	0x08000454
 8000434:	08000454 	.word	0x08000454
 8000438:	08000458 	.word	0x08000458

0800043c <_init>:
 800043c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800043e:	bf00      	nop
 8000440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000442:	bc08      	pop	{r3}
 8000444:	469e      	mov	lr, r3
 8000446:	4770      	bx	lr

08000448 <_fini>:
 8000448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800044a:	bf00      	nop
 800044c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800044e:	bc08      	pop	{r3}
 8000450:	469e      	mov	lr, r3
 8000452:	4770      	bx	lr
