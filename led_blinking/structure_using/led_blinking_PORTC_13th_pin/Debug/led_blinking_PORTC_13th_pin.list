
led_blinking_PORTC_13th_pin.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000248  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003dc  080003dc  00002008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003dc  080003dc  00002008  2**0
                  CONTENTS
  4 .ARM          00000000  080003dc  080003dc  00002008  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003dc  080003dc  00002008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003dc  080003dc  000013dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080003e0  080003e0  000013e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000008  20000000  080003e4  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000008  080003ec  00002008  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  080003ec  00002024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002008  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000378  00000000  00000000  00002038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000162  00000000  00000000  000023b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000070  00000000  00000000  00002518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000004a  00000000  00000000  00002588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000ad5  00000000  00000000  000025d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000001db  00000000  00000000  000030a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00002fb6  00000000  00000000  00003282  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00006238  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000fc  00000000  00000000  0000627c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  00006378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000008 	.word	0x20000008
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080003c4 	.word	0x080003c4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000000c 	.word	0x2000000c
 80001d0:	080003c4 	.word	0x080003c4

080001d4 <main>:

#include "arm.h"   /* this header file for all register inside there. using for structure is user-defined data type */

/* main function */
int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
	/* function call */
	rcc_config();
 80001d8:	f000 f808 	bl	80001ec <rcc_config>
	peripheral_bus_config();
 80001dc:	f000 f840 	bl	8000260 <peripheral_bus_config>
	gpioc_moder();
 80001e0:	f000 f850 	bl	8000284 <gpioc_moder>

	while(1)
	{
		led_blinking();  /* keep on run for led blinking */
 80001e4:	f000 f87a 	bl	80002dc <led_blinking>
 80001e8:	e7fc      	b.n	80001e4 <main+0x10>
	...

080001ec <rcc_config>:
	}
}

void rcc_config(void)
{
 80001ec:	b480      	push	{r7}
 80001ee:	af00      	add	r7, sp, #0
	/* RCC register. starting page number is 102 */
	/* (RCC) Reset clock control (RCC_CR) 	Clock Control Register  */

	RCC->CR = RCC->CR & (~0x00010000); /* HSEON : HSE clock disable, 16th bit  */
 80001f0:	4b1a      	ldr	r3, [pc, #104]	@ (800025c <rcc_config+0x70>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	681a      	ldr	r2, [r3, #0]
 80001f6:	4b19      	ldr	r3, [pc, #100]	@ (800025c <rcc_config+0x70>)
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80001fe:	601a      	str	r2, [r3, #0]

	RCC->CR |= (1 << 16);      /* HSEON : HSE clock enable, 16th bit  */
 8000200:	4b16      	ldr	r3, [pc, #88]	@ (800025c <rcc_config+0x70>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	681a      	ldr	r2, [r3, #0]
 8000206:	4b15      	ldr	r3, [pc, #84]	@ (800025c <rcc_config+0x70>)
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800020e:	601a      	str	r2, [r3, #0]

	while(!(RCC->CR & (1 << 17)));  /* HSERDY : HSE oscillator ready, external high speed clock ready flag */
 8000210:	bf00      	nop
 8000212:	4b12      	ldr	r3, [pc, #72]	@ (800025c <rcc_config+0x70>)
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800021c:	2b00      	cmp	r3, #0
 800021e:	d0f8      	beq.n	8000212 <rcc_config+0x26>

	/* Clock Configuration Register (RCC_CFGR) */

	RCC->CFGR = RCC->CFGR & (~0x00000003);    /* clear system clock switch, 0th bit and 1st bit set value 11, after the clear */
 8000220:	4b0e      	ldr	r3, [pc, #56]	@ (800025c <rcc_config+0x70>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	689a      	ldr	r2, [r3, #8]
 8000226:	4b0d      	ldr	r3, [pc, #52]	@ (800025c <rcc_config+0x70>)
 8000228:	681b      	ldr	r3, [r3, #0]
 800022a:	f022 0203 	bic.w	r2, r2, #3
 800022e:	609a      	str	r2, [r3, #8]

	RCC->CFGR |= (1 << 0);  /* set HSE oscillator selected as system clock, 0th bit set 1 */
 8000230:	4b0a      	ldr	r3, [pc, #40]	@ (800025c <rcc_config+0x70>)
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	689a      	ldr	r2, [r3, #8]
 8000236:	4b09      	ldr	r3, [pc, #36]	@ (800025c <rcc_config+0x70>)
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	f042 0201 	orr.w	r2, r2, #1
 800023e:	609a      	str	r2, [r3, #8]

	while(!(RCC->CFGR & (0x00000004)));  /* HSE oscillator used as system clock, 2nd bit set 1, status checking */
 8000240:	bf00      	nop
 8000242:	4b06      	ldr	r3, [pc, #24]	@ (800025c <rcc_config+0x70>)
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	689b      	ldr	r3, [r3, #8]
 8000248:	f003 0304 	and.w	r3, r3, #4
 800024c:	2b00      	cmp	r3, #0
 800024e:	d0f8      	beq.n	8000242 <rcc_config+0x56>
}
 8000250:	bf00      	nop
 8000252:	bf00      	nop
 8000254:	46bd      	mov	sp, r7
 8000256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800025a:	4770      	bx	lr
 800025c:	20000000 	.word	0x20000000

08000260 <peripheral_bus_config>:

void peripheral_bus_config(void)
{
 8000260:	b480      	push	{r7}
 8000262:	af00      	add	r7, sp, #0
	/* Advanced High-Performance Bus 1, peripheral clock enable register (RCC_AHB1ENR) */
	RCC->AHB1ENR |= (1 << 2);   /* IO port c clock enable, 2nd bit set 1 */
 8000264:	4b06      	ldr	r3, [pc, #24]	@ (8000280 <peripheral_bus_config+0x20>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800026a:	4b05      	ldr	r3, [pc, #20]	@ (8000280 <peripheral_bus_config+0x20>)
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	f042 0204 	orr.w	r2, r2, #4
 8000272:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8000274:	bf00      	nop
 8000276:	46bd      	mov	sp, r7
 8000278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop
 8000280:	20000000 	.word	0x20000000

08000284 <gpioc_moder>:

void gpioc_moder(void)
{
 8000284:	b480      	push	{r7}
 8000286:	af00      	add	r7, sp, #0
	/* gpio register starting page number is 158 */
	/* port mode register (GPIOC_MODER) */

	GPIOC->MODER |= (1 << 26);   /*  01 : general purpose output mode, port c 13th pin in moder 13th pin 26th bit set 1 */
 8000288:	4b06      	ldr	r3, [pc, #24]	@ (80002a4 <gpioc_moder+0x20>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	681a      	ldr	r2, [r3, #0]
 800028e:	4b05      	ldr	r3, [pc, #20]	@ (80002a4 <gpioc_moder+0x20>)
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8000296:	601a      	str	r2, [r3, #0]
}
 8000298:	bf00      	nop
 800029a:	46bd      	mov	sp, r7
 800029c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a0:	4770      	bx	lr
 80002a2:	bf00      	nop
 80002a4:	20000004 	.word	0x20000004

080002a8 <delay_ms>:

void delay_ms(int ms)
{
 80002a8:	b480      	push	{r7}
 80002aa:	b085      	sub	sp, #20
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]
	/* delay */
	for (int i = 0; i < ms * 4000; i++)
 80002b0:	2300      	movs	r3, #0
 80002b2:	60fb      	str	r3, [r7, #12]
 80002b4:	e003      	b.n	80002be <delay_ms+0x16>
	{
		__asm("NOP");   /* asm means assembly */
 80002b6:	bf00      	nop
	for (int i = 0; i < ms * 4000; i++)
 80002b8:	68fb      	ldr	r3, [r7, #12]
 80002ba:	3301      	adds	r3, #1
 80002bc:	60fb      	str	r3, [r7, #12]
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 80002c4:	fb02 f303 	mul.w	r3, r2, r3
 80002c8:	68fa      	ldr	r2, [r7, #12]
 80002ca:	429a      	cmp	r2, r3
 80002cc:	dbf3      	blt.n	80002b6 <delay_ms+0xe>
	}
}
 80002ce:	bf00      	nop
 80002d0:	bf00      	nop
 80002d2:	3714      	adds	r7, #20
 80002d4:	46bd      	mov	sp, r7
 80002d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002da:	4770      	bx	lr

080002dc <led_blinking>:

void led_blinking(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	af00      	add	r7, sp, #0
	/* port output data register (GPIOC_ODR) */
	/* select the ODR 13th pin, set 1 and clear */
	/* PORTC 13th pin led */

	if (GPIOC->ODR & 1 << 13)   /* condition checking */
 80002e0:	4b10      	ldr	r3, [pc, #64]	@ (8000324 <led_blinking+0x48>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	695b      	ldr	r3, [r3, #20]
 80002e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d00c      	beq.n	8000308 <led_blinking+0x2c>
	{
		GPIOC->ODR &= ~(1 << 13);  /* led on */
 80002ee:	4b0d      	ldr	r3, [pc, #52]	@ (8000324 <led_blinking+0x48>)
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	695a      	ldr	r2, [r3, #20]
 80002f4:	4b0b      	ldr	r3, [pc, #44]	@ (8000324 <led_blinking+0x48>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80002fc:	615a      	str	r2, [r3, #20]
		delay_ms(1000);            /* delay for 1000ms milliseconds for stop */
 80002fe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000302:	f7ff ffd1 	bl	80002a8 <delay_ms>
	else
	{
		GPIOC->ODR |= (1 << 13);  /* led off */
		delay_ms(100);            /* delay for 1000ms milliseconds for stop */
	}
}
 8000306:	e00a      	b.n	800031e <led_blinking+0x42>
		GPIOC->ODR |= (1 << 13);  /* led off */
 8000308:	4b06      	ldr	r3, [pc, #24]	@ (8000324 <led_blinking+0x48>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	695a      	ldr	r2, [r3, #20]
 800030e:	4b05      	ldr	r3, [pc, #20]	@ (8000324 <led_blinking+0x48>)
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8000316:	615a      	str	r2, [r3, #20]
		delay_ms(100);            /* delay for 1000ms milliseconds for stop */
 8000318:	2064      	movs	r0, #100	@ 0x64
 800031a:	f7ff ffc5 	bl	80002a8 <delay_ms>
}
 800031e:	bf00      	nop
 8000320:	bd80      	pop	{r7, pc}
 8000322:	bf00      	nop
 8000324:	20000004 	.word	0x20000004

08000328 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000328:	480d      	ldr	r0, [pc, #52]	@ (8000360 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800032a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800032c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000330:	480c      	ldr	r0, [pc, #48]	@ (8000364 <LoopForever+0x6>)
  ldr r1, =_edata
 8000332:	490d      	ldr	r1, [pc, #52]	@ (8000368 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000334:	4a0d      	ldr	r2, [pc, #52]	@ (800036c <LoopForever+0xe>)
  movs r3, #0
 8000336:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000338:	e002      	b.n	8000340 <LoopCopyDataInit>

0800033a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800033a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800033c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800033e:	3304      	adds	r3, #4

08000340 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000340:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000342:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000344:	d3f9      	bcc.n	800033a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000346:	4a0a      	ldr	r2, [pc, #40]	@ (8000370 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000348:	4c0a      	ldr	r4, [pc, #40]	@ (8000374 <LoopForever+0x16>)
  movs r3, #0
 800034a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800034c:	e001      	b.n	8000352 <LoopFillZerobss>

0800034e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800034e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000350:	3204      	adds	r2, #4

08000352 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000352:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000354:	d3fb      	bcc.n	800034e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000356:	f000 f811 	bl	800037c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800035a:	f7ff ff3b 	bl	80001d4 <main>

0800035e <LoopForever>:

LoopForever:
  b LoopForever
 800035e:	e7fe      	b.n	800035e <LoopForever>
  ldr   r0, =_estack
 8000360:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000364:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000368:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 800036c:	080003e4 	.word	0x080003e4
  ldr r2, =_sbss
 8000370:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 8000374:	20000024 	.word	0x20000024

08000378 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000378:	e7fe      	b.n	8000378 <ADC_IRQHandler>
	...

0800037c <__libc_init_array>:
 800037c:	b570      	push	{r4, r5, r6, lr}
 800037e:	4d0d      	ldr	r5, [pc, #52]	@ (80003b4 <__libc_init_array+0x38>)
 8000380:	4c0d      	ldr	r4, [pc, #52]	@ (80003b8 <__libc_init_array+0x3c>)
 8000382:	1b64      	subs	r4, r4, r5
 8000384:	10a4      	asrs	r4, r4, #2
 8000386:	2600      	movs	r6, #0
 8000388:	42a6      	cmp	r6, r4
 800038a:	d109      	bne.n	80003a0 <__libc_init_array+0x24>
 800038c:	4d0b      	ldr	r5, [pc, #44]	@ (80003bc <__libc_init_array+0x40>)
 800038e:	4c0c      	ldr	r4, [pc, #48]	@ (80003c0 <__libc_init_array+0x44>)
 8000390:	f000 f818 	bl	80003c4 <_init>
 8000394:	1b64      	subs	r4, r4, r5
 8000396:	10a4      	asrs	r4, r4, #2
 8000398:	2600      	movs	r6, #0
 800039a:	42a6      	cmp	r6, r4
 800039c:	d105      	bne.n	80003aa <__libc_init_array+0x2e>
 800039e:	bd70      	pop	{r4, r5, r6, pc}
 80003a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80003a4:	4798      	blx	r3
 80003a6:	3601      	adds	r6, #1
 80003a8:	e7ee      	b.n	8000388 <__libc_init_array+0xc>
 80003aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80003ae:	4798      	blx	r3
 80003b0:	3601      	adds	r6, #1
 80003b2:	e7f2      	b.n	800039a <__libc_init_array+0x1e>
 80003b4:	080003dc 	.word	0x080003dc
 80003b8:	080003dc 	.word	0x080003dc
 80003bc:	080003dc 	.word	0x080003dc
 80003c0:	080003e0 	.word	0x080003e0

080003c4 <_init>:
 80003c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003c6:	bf00      	nop
 80003c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003ca:	bc08      	pop	{r3}
 80003cc:	469e      	mov	lr, r3
 80003ce:	4770      	bx	lr

080003d0 <_fini>:
 80003d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003d2:	bf00      	nop
 80003d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003d6:	bc08      	pop	{r3}
 80003d8:	469e      	mov	lr, r3
 80003da:	4770      	bx	lr
