
timer1_pwm_three_channel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000004ac  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000640  08000640  0000200c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000640  08000640  0000200c  2**0
                  CONTENTS
  4 .ARM          00000000  08000640  08000640  0000200c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000640  08000640  0000200c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000640  08000640  00001640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000644  08000644  00001644  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08000648  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  2000000c  08000654  0000200c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000028  08000654  00002028  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000200c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000450  00000000  00000000  0000203c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000014a  00000000  00000000  0000248c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000070  00000000  00000000  000025d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000004d  00000000  00000000  00002648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000ad5  00000000  00000000  00002695  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000332  00000000  00000000  0000316a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000300b  00000000  00000000  0000349c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000064a7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000100  00000000  00000000  000064ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  000065ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000628 	.word	0x08000628

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08000628 	.word	0x08000628

080001d4 <main>:

#include "arm.h"  /* this header file for all register inside there. using for structure is user-defined data type */

/* main function */
int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
	/* function call */
    rcc_config();
 80001d8:	f000 f80a 	bl	80001f0 <rcc_config>
    peripheral_bus_config();
 80001dc:	f000 f83a 	bl	8000254 <peripheral_bus_config>
    gpioa_moder_config();
 80001e0:	f000 f852 	bl	8000288 <gpioa_moder_config>
    pwm_timer1_config();
 80001e4:	f000 f8ba 	bl	800035c <pwm_timer1_config>
    while(1)
    {
    	rgb_led_blinking();
 80001e8:	f000 f978 	bl	80004dc <rgb_led_blinking>
 80001ec:	e7fc      	b.n	80001e8 <main+0x14>
	...

080001f0 <rcc_config>:
    }
}

/* function definition */
void rcc_config(void)
{
 80001f0:	b480      	push	{r7}
 80001f2:	af00      	add	r7, sp, #0
	/* select HSI internal clock for 16 MHz ---> Mega hertz. Mega means 10^6 */

	/* Reset clock control register (RCC_CR) */

	/* set and clear for HSION bit */
	RCC->CR &= ~(1 << 0);
 80001f4:	4b16      	ldr	r3, [pc, #88]	@ (8000250 <rcc_config+0x60>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	681a      	ldr	r2, [r3, #0]
 80001fa:	4b15      	ldr	r3, [pc, #84]	@ (8000250 <rcc_config+0x60>)
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	f022 0201 	bic.w	r2, r2, #1
 8000202:	601a      	str	r2, [r3, #0]

	/* HSION : Internal high-speed clock enable. 0th bit set 1. 1 : HSI oscillator ON */
	RCC->CR |= (1 << 0);
 8000204:	4b12      	ldr	r3, [pc, #72]	@ (8000250 <rcc_config+0x60>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	681a      	ldr	r2, [r3, #0]
 800020a:	4b11      	ldr	r3, [pc, #68]	@ (8000250 <rcc_config+0x60>)
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	f042 0201 	orr.w	r2, r2, #1
 8000212:	601a      	str	r2, [r3, #0]

	/* HSIRDY : Internal high-speed clock ready flag. 1st bit set 1. 1 : HSI oscillator ready */
	while(!(RCC->CR & (1 << 1)));
 8000214:	bf00      	nop
 8000216:	4b0e      	ldr	r3, [pc, #56]	@ (8000250 <rcc_config+0x60>)
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	f003 0302 	and.w	r3, r3, #2
 8000220:	2b00      	cmp	r3, #0
 8000222:	d0f8      	beq.n	8000216 <rcc_config+0x26>

	/* SW : System clock switch. 00 : HSI oscillator selected as system clock. 0th bit and 1st bit. set 00 */
	RCC->CFGR &= ~(3 << 0);
 8000224:	4b0a      	ldr	r3, [pc, #40]	@ (8000250 <rcc_config+0x60>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	689a      	ldr	r2, [r3, #8]
 800022a:	4b09      	ldr	r3, [pc, #36]	@ (8000250 <rcc_config+0x60>)
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	f022 0203 	bic.w	r2, r2, #3
 8000232:	609a      	str	r2, [r3, #8]

    /* SWS : System clock switch status. 00 : HSI oscillator used as the system clock. 2nd bit and 3rd bit. set 00  */
	while((RCC->CFGR & (3 << 2)) != (0 << 2));
 8000234:	bf00      	nop
 8000236:	4b06      	ldr	r3, [pc, #24]	@ (8000250 <rcc_config+0x60>)
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	689b      	ldr	r3, [r3, #8]
 800023c:	f003 030c 	and.w	r3, r3, #12
 8000240:	2b00      	cmp	r3, #0
 8000242:	d1f8      	bne.n	8000236 <rcc_config+0x46>
}
 8000244:	bf00      	nop
 8000246:	bf00      	nop
 8000248:	46bd      	mov	sp, r7
 800024a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800024e:	4770      	bx	lr
 8000250:	20000000 	.word	0x20000000

08000254 <peripheral_bus_config>:

void peripheral_bus_config(void)
{
 8000254:	b480      	push	{r7}
 8000256:	af00      	add	r7, sp, #0
	/* Advanced High Bus 1. peripheral clock enable register (RCC_AHB1ENR) */

	/* GPIOAEN : port A clock enable */
	RCC->AHB1ENR |= (1 << 0); // PORT GPIOAEN : port a clock enable
 8000258:	4b0a      	ldr	r3, [pc, #40]	@ (8000284 <peripheral_bus_config+0x30>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800025e:	4b09      	ldr	r3, [pc, #36]	@ (8000284 <peripheral_bus_config+0x30>)
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	f042 0201 	orr.w	r2, r2, #1
 8000266:	631a      	str	r2, [r3, #48]	@ 0x30

	/* Advanced peripheral Bus 2. peripheral clock enable register (RCC_APB2ENR) */

	/* TIM1EN: TIM1 clock enable */
	RCC->APB2ENR |= (1 << 0); // TIM1 TIM1EN : timer 1 clock enable
 8000268:	4b06      	ldr	r3, [pc, #24]	@ (8000284 <peripheral_bus_config+0x30>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800026e:	4b05      	ldr	r3, [pc, #20]	@ (8000284 <peripheral_bus_config+0x30>)
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	f042 0201 	orr.w	r2, r2, #1
 8000276:	645a      	str	r2, [r3, #68]	@ 0x44
}
 8000278:	bf00      	nop
 800027a:	46bd      	mov	sp, r7
 800027c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000280:	4770      	bx	lr
 8000282:	bf00      	nop
 8000284:	20000000 	.word	0x20000000

08000288 <gpioa_moder_config>:

void gpioa_moder_config(void)
{
 8000288:	b480      	push	{r7}
 800028a:	af00      	add	r7, sp, #0
	/* General purpose input and output (GPIO) */
	/* GPIO port mode register (GPIOA_MODER) */

	/* PORT A MODER8. I select for port A 8th pin for TIMER 1 TIM1_CH1 timer1 first channel */
	GPIOA->MODER |= (1 << 17); // MODER8 Port A 8th pin. 10 : Alternate function mode
 800028c:	4b32      	ldr	r3, [pc, #200]	@ (8000358 <gpioa_moder_config+0xd0>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	681a      	ldr	r2, [r3, #0]
 8000292:	4b31      	ldr	r3, [pc, #196]	@ (8000358 <gpioa_moder_config+0xd0>)
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800029a:	601a      	str	r2, [r3, #0]

	/* PORT A MODER9. I select for port A 9th pin for TIMER 1 TIM1_CH2 timer1 second channel */
	GPIOA->MODER |= (1 << 19); // MODER9 Port A 9th pin. 10 : Alternate function mode
 800029c:	4b2e      	ldr	r3, [pc, #184]	@ (8000358 <gpioa_moder_config+0xd0>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	681a      	ldr	r2, [r3, #0]
 80002a2:	4b2d      	ldr	r3, [pc, #180]	@ (8000358 <gpioa_moder_config+0xd0>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 80002aa:	601a      	str	r2, [r3, #0]

	/* PORT A MODER10. I select for port A 10th pin for TIMER 1 TIM1_CH3 timer1 third channel */
	GPIOA->MODER |= (1 << 21); // MODER10 Port A 10th pin. 10 : Alternate function mode
 80002ac:	4b2a      	ldr	r3, [pc, #168]	@ (8000358 <gpioa_moder_config+0xd0>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	681a      	ldr	r2, [r3, #0]
 80002b2:	4b29      	ldr	r3, [pc, #164]	@ (8000358 <gpioa_moder_config+0xd0>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 80002ba:	601a      	str	r2, [r3, #0]

	/* output speed register (GPIOB_OSPEEDR) */

	GPIOA->OSPEEDR |= (1 << 17);  // 10 : High speed
 80002bc:	4b26      	ldr	r3, [pc, #152]	@ (8000358 <gpioa_moder_config+0xd0>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	689a      	ldr	r2, [r3, #8]
 80002c2:	4b25      	ldr	r3, [pc, #148]	@ (8000358 <gpioa_moder_config+0xd0>)
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80002ca:	609a      	str	r2, [r3, #8]
	GPIOA->OSPEEDR |= (1 << 19);
 80002cc:	4b22      	ldr	r3, [pc, #136]	@ (8000358 <gpioa_moder_config+0xd0>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	689a      	ldr	r2, [r3, #8]
 80002d2:	4b21      	ldr	r3, [pc, #132]	@ (8000358 <gpioa_moder_config+0xd0>)
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 80002da:	609a      	str	r2, [r3, #8]
	GPIOA->OSPEEDR |= (1 << 21);
 80002dc:	4b1e      	ldr	r3, [pc, #120]	@ (8000358 <gpioa_moder_config+0xd0>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	689a      	ldr	r2, [r3, #8]
 80002e2:	4b1d      	ldr	r3, [pc, #116]	@ (8000358 <gpioa_moder_config+0xd0>)
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 80002ea:	609a      	str	r2, [r3, #8]

	/* pull-up/pull-down register (GPIOB_PUPDR) */
	GPIOA->PUPDR |= (1 << 17);  // 10 : Pull-down
 80002ec:	4b1a      	ldr	r3, [pc, #104]	@ (8000358 <gpioa_moder_config+0xd0>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	68da      	ldr	r2, [r3, #12]
 80002f2:	4b19      	ldr	r3, [pc, #100]	@ (8000358 <gpioa_moder_config+0xd0>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80002fa:	60da      	str	r2, [r3, #12]
	GPIOA->PUPDR |= (1 << 19);
 80002fc:	4b16      	ldr	r3, [pc, #88]	@ (8000358 <gpioa_moder_config+0xd0>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	68da      	ldr	r2, [r3, #12]
 8000302:	4b15      	ldr	r3, [pc, #84]	@ (8000358 <gpioa_moder_config+0xd0>)
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 800030a:	60da      	str	r2, [r3, #12]
	GPIOA->PUPDR |= (1 << 21);
 800030c:	4b12      	ldr	r3, [pc, #72]	@ (8000358 <gpioa_moder_config+0xd0>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	68da      	ldr	r2, [r3, #12]
 8000312:	4b11      	ldr	r3, [pc, #68]	@ (8000358 <gpioa_moder_config+0xd0>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 800031a:	60da      	str	r2, [r3, #12]

	/* alternate function high register (GPIOB_AFRH) */
	GPIOA->AFRH |= (1 << 0);   // 0001 : AF1 timer1 pin. PORTA 8th pin for TIM1_CH1 timer1 first channel
 800031c:	4b0e      	ldr	r3, [pc, #56]	@ (8000358 <gpioa_moder_config+0xd0>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000322:	4b0d      	ldr	r3, [pc, #52]	@ (8000358 <gpioa_moder_config+0xd0>)
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	f042 0201 	orr.w	r2, r2, #1
 800032a:	625a      	str	r2, [r3, #36]	@ 0x24
	GPIOA->AFRH |= (1 << 4);   // 0001 : AF1 timer1 pin. PORTA 9th pin for TIM1_CH2 timer1 second channel
 800032c:	4b0a      	ldr	r3, [pc, #40]	@ (8000358 <gpioa_moder_config+0xd0>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000332:	4b09      	ldr	r3, [pc, #36]	@ (8000358 <gpioa_moder_config+0xd0>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	f042 0210 	orr.w	r2, r2, #16
 800033a:	625a      	str	r2, [r3, #36]	@ 0x24
	GPIOA->AFRH |= (1 << 8);   // 0001 : AF1 timer1 pin. PORTA 10th pin for TIM1_CH3 timer1 third channel
 800033c:	4b06      	ldr	r3, [pc, #24]	@ (8000358 <gpioa_moder_config+0xd0>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000342:	4b05      	ldr	r3, [pc, #20]	@ (8000358 <gpioa_moder_config+0xd0>)
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800034a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800034c:	bf00      	nop
 800034e:	46bd      	mov	sp, r7
 8000350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000354:	4770      	bx	lr
 8000356:	bf00      	nop
 8000358:	20000004 	.word	0x20000004

0800035c <pwm_timer1_config>:

void pwm_timer1_config(void)
{
 800035c:	b480      	push	{r7}
 800035e:	af00      	add	r7, sp, #0
	/* capture/compare mode register 1 (TIM1_CCMR1) */

	/* OC1M : output compare 1 mode. output pin select.
	* 110 : PWM mode 1 - in upcounting, channel 1 is active as long as TIMx_CNT<TIMx_CCR1 else inactive. */
	TIM1->CCMR1 |= (6 << 4);  // pwm mode 1. OC1M. first pin TIM1_CH1
 8000360:	4b5d      	ldr	r3, [pc, #372]	@ (80004d8 <pwm_timer1_config+0x17c>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	699a      	ldr	r2, [r3, #24]
 8000366:	4b5c      	ldr	r3, [pc, #368]	@ (80004d8 <pwm_timer1_config+0x17c>)
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800036e:	619a      	str	r2, [r3, #24]

	/* OC1PE : output compare 1 preload enable.
	 * 0 : preload register on TIM1_CCR1 disabled. write OC1PE = 0 to disable preload register */
	TIM1->CCMR1 &= ~(1 << 3);  // OC1PE
 8000370:	4b59      	ldr	r3, [pc, #356]	@ (80004d8 <pwm_timer1_config+0x17c>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	699a      	ldr	r2, [r3, #24]
 8000376:	4b58      	ldr	r3, [pc, #352]	@ (80004d8 <pwm_timer1_config+0x17c>)
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	f022 0208 	bic.w	r2, r2, #8
 800037e:	619a      	str	r2, [r3, #24]

	/* OC1FE : output compare 1 fast enable.
	 * 1 : An active edge on the trigger input acts like a compare match on CC1 output. */
	TIM1->CCMR1 |= (1 << 2);  // OC1FE
 8000380:	4b55      	ldr	r3, [pc, #340]	@ (80004d8 <pwm_timer1_config+0x17c>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	699a      	ldr	r2, [r3, #24]
 8000386:	4b54      	ldr	r3, [pc, #336]	@ (80004d8 <pwm_timer1_config+0x17c>)
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	f042 0204 	orr.w	r2, r2, #4
 800038e:	619a      	str	r2, [r3, #24]

	/* CC1S : capture/compare 1 selection
	* 00 : CC1 channel is configured as output */
	TIM1->CCMR1 &= ~(3 << 0); // CC1S
 8000390:	4b51      	ldr	r3, [pc, #324]	@ (80004d8 <pwm_timer1_config+0x17c>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	699a      	ldr	r2, [r3, #24]
 8000396:	4b50      	ldr	r3, [pc, #320]	@ (80004d8 <pwm_timer1_config+0x17c>)
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	f022 0203 	bic.w	r2, r2, #3
 800039e:	619a      	str	r2, [r3, #24]

	TIM1->CCMR1 |= (6 << 12); // pwm mode 1. OC2M. second pin TIM1_CH2
 80003a0:	4b4d      	ldr	r3, [pc, #308]	@ (80004d8 <pwm_timer1_config+0x17c>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	699a      	ldr	r2, [r3, #24]
 80003a6:	4b4c      	ldr	r3, [pc, #304]	@ (80004d8 <pwm_timer1_config+0x17c>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	f442 42c0 	orr.w	r2, r2, #24576	@ 0x6000
 80003ae:	619a      	str	r2, [r3, #24]
	TIM1->CCMR1 |= (1 << 11); // OC2PE
 80003b0:	4b49      	ldr	r3, [pc, #292]	@ (80004d8 <pwm_timer1_config+0x17c>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	699a      	ldr	r2, [r3, #24]
 80003b6:	4b48      	ldr	r3, [pc, #288]	@ (80004d8 <pwm_timer1_config+0x17c>)
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80003be:	619a      	str	r2, [r3, #24]
	TIM1->CCMR1 |= (1 << 10); // OC2FE
 80003c0:	4b45      	ldr	r3, [pc, #276]	@ (80004d8 <pwm_timer1_config+0x17c>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	699a      	ldr	r2, [r3, #24]
 80003c6:	4b44      	ldr	r3, [pc, #272]	@ (80004d8 <pwm_timer1_config+0x17c>)
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80003ce:	619a      	str	r2, [r3, #24]
	TIM1->CCMR1 &= ~(3 << 8); // CC2S
 80003d0:	4b41      	ldr	r3, [pc, #260]	@ (80004d8 <pwm_timer1_config+0x17c>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	699a      	ldr	r2, [r3, #24]
 80003d6:	4b40      	ldr	r3, [pc, #256]	@ (80004d8 <pwm_timer1_config+0x17c>)
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80003de:	619a      	str	r2, [r3, #24]

	TIM1->CCMR2 |= (6 << 4);  // pwm mode 1. OC3M. third pin TIM1_CH3
 80003e0:	4b3d      	ldr	r3, [pc, #244]	@ (80004d8 <pwm_timer1_config+0x17c>)
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	69da      	ldr	r2, [r3, #28]
 80003e6:	4b3c      	ldr	r3, [pc, #240]	@ (80004d8 <pwm_timer1_config+0x17c>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 80003ee:	61da      	str	r2, [r3, #28]
	TIM1->CCMR2 |= (1 << 3);  // OC3PE
 80003f0:	4b39      	ldr	r3, [pc, #228]	@ (80004d8 <pwm_timer1_config+0x17c>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	69da      	ldr	r2, [r3, #28]
 80003f6:	4b38      	ldr	r3, [pc, #224]	@ (80004d8 <pwm_timer1_config+0x17c>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	f042 0208 	orr.w	r2, r2, #8
 80003fe:	61da      	str	r2, [r3, #28]
	TIM1->CCMR2 |= (1 << 2);  // OC3FE
 8000400:	4b35      	ldr	r3, [pc, #212]	@ (80004d8 <pwm_timer1_config+0x17c>)
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	69da      	ldr	r2, [r3, #28]
 8000406:	4b34      	ldr	r3, [pc, #208]	@ (80004d8 <pwm_timer1_config+0x17c>)
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	f042 0204 	orr.w	r2, r2, #4
 800040e:	61da      	str	r2, [r3, #28]
	TIM1->CCMR2 &= ~(3 << 0); // CC3S
 8000410:	4b31      	ldr	r3, [pc, #196]	@ (80004d8 <pwm_timer1_config+0x17c>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	69da      	ldr	r2, [r3, #28]
 8000416:	4b30      	ldr	r3, [pc, #192]	@ (80004d8 <pwm_timer1_config+0x17c>)
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	f022 0203 	bic.w	r2, r2, #3
 800041e:	61da      	str	r2, [r3, #28]


	TIM1->ARR = 320;
 8000420:	4b2d      	ldr	r3, [pc, #180]	@ (80004d8 <pwm_timer1_config+0x17c>)
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000428:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM1->PSC = 999;
 800042a:	4b2b      	ldr	r3, [pc, #172]	@ (80004d8 <pwm_timer1_config+0x17c>)
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000432:	629a      	str	r2, [r3, #40]	@ 0x28

	TIM1->CNT = 0;
 8000434:	4b28      	ldr	r3, [pc, #160]	@ (80004d8 <pwm_timer1_config+0x17c>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	2200      	movs	r2, #0
 800043a:	625a      	str	r2, [r3, #36]	@ 0x24

	TIM1->EGR |= (3 << 0);
 800043c:	4b26      	ldr	r3, [pc, #152]	@ (80004d8 <pwm_timer1_config+0x17c>)
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	695a      	ldr	r2, [r3, #20]
 8000442:	4b25      	ldr	r3, [pc, #148]	@ (80004d8 <pwm_timer1_config+0x17c>)
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	f042 0203 	orr.w	r2, r2, #3
 800044a:	615a      	str	r2, [r3, #20]


	TIM1->CCER |= (1 << 0);  // CC1E
 800044c:	4b22      	ldr	r3, [pc, #136]	@ (80004d8 <pwm_timer1_config+0x17c>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	6a1a      	ldr	r2, [r3, #32]
 8000452:	4b21      	ldr	r3, [pc, #132]	@ (80004d8 <pwm_timer1_config+0x17c>)
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	f042 0201 	orr.w	r2, r2, #1
 800045a:	621a      	str	r2, [r3, #32]
	TIM1->CCER &= ~(1 << 1); // CC1P
 800045c:	4b1e      	ldr	r3, [pc, #120]	@ (80004d8 <pwm_timer1_config+0x17c>)
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	6a1a      	ldr	r2, [r3, #32]
 8000462:	4b1d      	ldr	r3, [pc, #116]	@ (80004d8 <pwm_timer1_config+0x17c>)
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	f022 0202 	bic.w	r2, r2, #2
 800046a:	621a      	str	r2, [r3, #32]

	TIM1->CCER |= (1 << 4);  // CC2E
 800046c:	4b1a      	ldr	r3, [pc, #104]	@ (80004d8 <pwm_timer1_config+0x17c>)
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	6a1a      	ldr	r2, [r3, #32]
 8000472:	4b19      	ldr	r3, [pc, #100]	@ (80004d8 <pwm_timer1_config+0x17c>)
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	f042 0210 	orr.w	r2, r2, #16
 800047a:	621a      	str	r2, [r3, #32]
	TIM1->CCER &= ~(1 << 5); // CC2P
 800047c:	4b16      	ldr	r3, [pc, #88]	@ (80004d8 <pwm_timer1_config+0x17c>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	6a1a      	ldr	r2, [r3, #32]
 8000482:	4b15      	ldr	r3, [pc, #84]	@ (80004d8 <pwm_timer1_config+0x17c>)
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	f022 0220 	bic.w	r2, r2, #32
 800048a:	621a      	str	r2, [r3, #32]

	TIM1->CCER |= (1 << 8);  // CC3E
 800048c:	4b12      	ldr	r3, [pc, #72]	@ (80004d8 <pwm_timer1_config+0x17c>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	6a1a      	ldr	r2, [r3, #32]
 8000492:	4b11      	ldr	r3, [pc, #68]	@ (80004d8 <pwm_timer1_config+0x17c>)
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800049a:	621a      	str	r2, [r3, #32]
	TIM1->CCER &= ~(1 << 9); // CC3P
 800049c:	4b0e      	ldr	r3, [pc, #56]	@ (80004d8 <pwm_timer1_config+0x17c>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	6a1a      	ldr	r2, [r3, #32]
 80004a2:	4b0d      	ldr	r3, [pc, #52]	@ (80004d8 <pwm_timer1_config+0x17c>)
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80004aa:	621a      	str	r2, [r3, #32]

	TIM1->BDTR |= (1 << 15); // MOE
 80004ac:	4b0a      	ldr	r3, [pc, #40]	@ (80004d8 <pwm_timer1_config+0x17c>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80004b2:	4b09      	ldr	r3, [pc, #36]	@ (80004d8 <pwm_timer1_config+0x17c>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80004ba:	645a      	str	r2, [r3, #68]	@ 0x44
	TIM1->CR1 |= (1 << 0);
 80004bc:	4b06      	ldr	r3, [pc, #24]	@ (80004d8 <pwm_timer1_config+0x17c>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	681a      	ldr	r2, [r3, #0]
 80004c2:	4b05      	ldr	r3, [pc, #20]	@ (80004d8 <pwm_timer1_config+0x17c>)
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	f042 0201 	orr.w	r2, r2, #1
 80004ca:	601a      	str	r2, [r3, #0]
}
 80004cc:	bf00      	nop
 80004ce:	46bd      	mov	sp, r7
 80004d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop
 80004d8:	20000008 	.word	0x20000008

080004dc <rgb_led_blinking>:

void rgb_led_blinking(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	b083      	sub	sp, #12
 80004e0:	af00      	add	r7, sp, #0
	for (int i = 0; i <= 320; i++)
 80004e2:	2300      	movs	r3, #0
 80004e4:	607b      	str	r3, [r7, #4]
 80004e6:	e01e      	b.n	8000526 <rgb_led_blinking+0x4a>
	{
		while(!(TIM1->SR & (1 << 0)));
 80004e8:	bf00      	nop
 80004ea:	4b27      	ldr	r3, [pc, #156]	@ (8000588 <rgb_led_blinking+0xac>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	691b      	ldr	r3, [r3, #16]
 80004f0:	f003 0301 	and.w	r3, r3, #1
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d0f8      	beq.n	80004ea <rgb_led_blinking+0xe>
		TIM1->SR &= ~(1 << 0);
 80004f8:	4b23      	ldr	r3, [pc, #140]	@ (8000588 <rgb_led_blinking+0xac>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	691a      	ldr	r2, [r3, #16]
 80004fe:	4b22      	ldr	r3, [pc, #136]	@ (8000588 <rgb_led_blinking+0xac>)
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	f022 0201 	bic.w	r2, r2, #1
 8000506:	611a      	str	r2, [r3, #16]
		TIM1->CCR1 = i;
 8000508:	4b1f      	ldr	r3, [pc, #124]	@ (8000588 <rgb_led_blinking+0xac>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	687a      	ldr	r2, [r7, #4]
 800050e:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM1->CCR2 = i;
 8000510:	4b1d      	ldr	r3, [pc, #116]	@ (8000588 <rgb_led_blinking+0xac>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	687a      	ldr	r2, [r7, #4]
 8000516:	639a      	str	r2, [r3, #56]	@ 0x38
		TIM1->CCR3 = i;
 8000518:	4b1b      	ldr	r3, [pc, #108]	@ (8000588 <rgb_led_blinking+0xac>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	687a      	ldr	r2, [r7, #4]
 800051e:	63da      	str	r2, [r3, #60]	@ 0x3c
	for (int i = 0; i <= 320; i++)
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	3301      	adds	r3, #1
 8000524:	607b      	str	r3, [r7, #4]
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800052c:	dddc      	ble.n	80004e8 <rgb_led_blinking+0xc>
	}

	for (int j = 320; j >= 0; j--)
 800052e:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000532:	603b      	str	r3, [r7, #0]
 8000534:	e01e      	b.n	8000574 <rgb_led_blinking+0x98>
	{
		while(!(TIM1->SR & (1 << 0)));
 8000536:	bf00      	nop
 8000538:	4b13      	ldr	r3, [pc, #76]	@ (8000588 <rgb_led_blinking+0xac>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	691b      	ldr	r3, [r3, #16]
 800053e:	f003 0301 	and.w	r3, r3, #1
 8000542:	2b00      	cmp	r3, #0
 8000544:	d0f8      	beq.n	8000538 <rgb_led_blinking+0x5c>
		TIM1->SR &= ~(1 << 0);
 8000546:	4b10      	ldr	r3, [pc, #64]	@ (8000588 <rgb_led_blinking+0xac>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	691a      	ldr	r2, [r3, #16]
 800054c:	4b0e      	ldr	r3, [pc, #56]	@ (8000588 <rgb_led_blinking+0xac>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	f022 0201 	bic.w	r2, r2, #1
 8000554:	611a      	str	r2, [r3, #16]
		TIM1->CCR1 = j;
 8000556:	4b0c      	ldr	r3, [pc, #48]	@ (8000588 <rgb_led_blinking+0xac>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	683a      	ldr	r2, [r7, #0]
 800055c:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM1->CCR2 = j;
 800055e:	4b0a      	ldr	r3, [pc, #40]	@ (8000588 <rgb_led_blinking+0xac>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	683a      	ldr	r2, [r7, #0]
 8000564:	639a      	str	r2, [r3, #56]	@ 0x38
		TIM1->CCR3 = j;
 8000566:	4b08      	ldr	r3, [pc, #32]	@ (8000588 <rgb_led_blinking+0xac>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	683a      	ldr	r2, [r7, #0]
 800056c:	63da      	str	r2, [r3, #60]	@ 0x3c
	for (int j = 320; j >= 0; j--)
 800056e:	683b      	ldr	r3, [r7, #0]
 8000570:	3b01      	subs	r3, #1
 8000572:	603b      	str	r3, [r7, #0]
 8000574:	683b      	ldr	r3, [r7, #0]
 8000576:	2b00      	cmp	r3, #0
 8000578:	dadd      	bge.n	8000536 <rgb_led_blinking+0x5a>
	}
}
 800057a:	bf00      	nop
 800057c:	bf00      	nop
 800057e:	370c      	adds	r7, #12
 8000580:	46bd      	mov	sp, r7
 8000582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000586:	4770      	bx	lr
 8000588:	20000008 	.word	0x20000008

0800058c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800058c:	480d      	ldr	r0, [pc, #52]	@ (80005c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800058e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000590:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000594:	480c      	ldr	r0, [pc, #48]	@ (80005c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000596:	490d      	ldr	r1, [pc, #52]	@ (80005cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000598:	4a0d      	ldr	r2, [pc, #52]	@ (80005d0 <LoopForever+0xe>)
  movs r3, #0
 800059a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800059c:	e002      	b.n	80005a4 <LoopCopyDataInit>

0800059e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800059e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005a2:	3304      	adds	r3, #4

080005a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005a8:	d3f9      	bcc.n	800059e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005aa:	4a0a      	ldr	r2, [pc, #40]	@ (80005d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005ac:	4c0a      	ldr	r4, [pc, #40]	@ (80005d8 <LoopForever+0x16>)
  movs r3, #0
 80005ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005b0:	e001      	b.n	80005b6 <LoopFillZerobss>

080005b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005b4:	3204      	adds	r2, #4

080005b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005b8:	d3fb      	bcc.n	80005b2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80005ba:	f000 f811 	bl	80005e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005be:	f7ff fe09 	bl	80001d4 <main>

080005c2 <LoopForever>:

LoopForever:
  b LoopForever
 80005c2:	e7fe      	b.n	80005c2 <LoopForever>
  ldr   r0, =_estack
 80005c4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80005c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005cc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80005d0:	08000648 	.word	0x08000648
  ldr r2, =_sbss
 80005d4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80005d8:	20000028 	.word	0x20000028

080005dc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005dc:	e7fe      	b.n	80005dc <ADC_IRQHandler>
	...

080005e0 <__libc_init_array>:
 80005e0:	b570      	push	{r4, r5, r6, lr}
 80005e2:	4d0d      	ldr	r5, [pc, #52]	@ (8000618 <__libc_init_array+0x38>)
 80005e4:	4c0d      	ldr	r4, [pc, #52]	@ (800061c <__libc_init_array+0x3c>)
 80005e6:	1b64      	subs	r4, r4, r5
 80005e8:	10a4      	asrs	r4, r4, #2
 80005ea:	2600      	movs	r6, #0
 80005ec:	42a6      	cmp	r6, r4
 80005ee:	d109      	bne.n	8000604 <__libc_init_array+0x24>
 80005f0:	4d0b      	ldr	r5, [pc, #44]	@ (8000620 <__libc_init_array+0x40>)
 80005f2:	4c0c      	ldr	r4, [pc, #48]	@ (8000624 <__libc_init_array+0x44>)
 80005f4:	f000 f818 	bl	8000628 <_init>
 80005f8:	1b64      	subs	r4, r4, r5
 80005fa:	10a4      	asrs	r4, r4, #2
 80005fc:	2600      	movs	r6, #0
 80005fe:	42a6      	cmp	r6, r4
 8000600:	d105      	bne.n	800060e <__libc_init_array+0x2e>
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f855 3b04 	ldr.w	r3, [r5], #4
 8000608:	4798      	blx	r3
 800060a:	3601      	adds	r6, #1
 800060c:	e7ee      	b.n	80005ec <__libc_init_array+0xc>
 800060e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000612:	4798      	blx	r3
 8000614:	3601      	adds	r6, #1
 8000616:	e7f2      	b.n	80005fe <__libc_init_array+0x1e>
 8000618:	08000640 	.word	0x08000640
 800061c:	08000640 	.word	0x08000640
 8000620:	08000640 	.word	0x08000640
 8000624:	08000644 	.word	0x08000644

08000628 <_init>:
 8000628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800062a:	bf00      	nop
 800062c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800062e:	bc08      	pop	{r3}
 8000630:	469e      	mov	lr, r3
 8000632:	4770      	bx	lr

08000634 <_fini>:
 8000634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000636:	bf00      	nop
 8000638:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800063a:	bc08      	pop	{r3}
 800063c:	469e      	mov	lr, r3
 800063e:	4770      	bx	lr
